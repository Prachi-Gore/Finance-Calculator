}
})
#histogram
data_hist= reactive({
req(input$file_hist)
file_ext= file_ext(input$file_hist$datapath)
if(file_ext=="xlsx"||file_ext=="xls"){
df=read_excel(input$file_hist$datapath)
return(select_if(df, is.numeric))
}
else{
df <- read.csv(input$file_hist$datapath )
return(select_if(df, is.numeric))
}
})
#scatter
data_scatter=reactive({
req(input$file_scatter)
file_ext= file_ext(input$file_scatter$datapath)
if(file_ext=="xlsx"|file_ext=="xls"){
df=read_excel(input$file_scatter$datapath)
}
else{
df <- read.csv(input$file_scatter$datapath )
}
return(select_if(df, is.numeric))
})
#Simple_Regression
data_simple
reactive({
req(input$filedata)
inData <- input$filedata
if (is.null(inData)){ return(NULL) }
mydata <- read.csv(inData$datapath, header = TRUE, sep=",")
})
output$tb1 <- renderDT(data())
output$xvariable <- renderUI({
req(data())
xa<-colnames(data())
pickerInput(inputId = 'xvar',
label = 'Select x-axis variable',
choices = c(xa[1:length(xa)]), selected=xa[1],
options = list(`style` = "btn-info"))
})
output$yvariable <- renderUI({
req(data())
ya<-colnames(data())
pickerInput(inputId = 'yvar',
label = 'Select y-axis variable',
choices = c(ya[1:length(ya)]), selected=ya[2],
options = list(`style` = "btn-info"),
multiple = TRUE)
})
lmModel <- reactive({
req(data(),input$xvar,input$yvar)
x <- as.numeric(data()[[as.name(input$xvar)]])
y <- as.numeric(data()[[as.name(input$yvar)]])
if (length(x) == length(y)){
model <- lm(x ~ y, data = data(), na.action=na.exclude)
}else model <- NULL
return(model)
})
##
# data= reactive({
#
#   req(input$file_scatter)
#   file_ext= file_ext(input$file_scatter$datapath)
#
#
#   if(file_ext=="xlsx"|file_ext=="xls"){
#     df=read_excel(input$file_scatter$datapath)
#   }
#   else{
#     df <- read.csv(input$file_scatter$datapath )
#   }
#
# })
update_input= function(input_id,label,data){
return(
updateSelectInput(
session = getDefaultReactiveDomain(),
inputId = input_id,
label = label,
choices = names(data()),
selected = NULL
) )
}
observe(update_input("hist_var_id","choose Variable",data_hist))
observe(update_input("scatter_var1_id",label="select X variable",data_scatter))
observe(update_input("scatter_var2_id",label="select Y variable",data_scatter))
output$contents <-renderDataTable(data_view())
output$histogram <- renderPlot({
x = as.numeric(unlist(data_hist()[,input$hist_var_id]))
# print(is.numeric(x))
# print(x)
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x,xlab=input$hist_var_id, breaks=bins,col="#75AADB",border = "white",main = paste("Histogram of" ,input$hist_var_id))
}
)
output$scatter <- renderPlot({
x = as.numeric(unlist(data_scatter()[,input$scatter_var1_id]))
y=as.numeric(unlist(data_scatter()[,input$scatter_var2_id]))
plot(x,y,xlab=input$scatter_var1_id,ylab=input$scatter_var2_id,main = paste("Scatter plot of" ,input$scatter_var1_id,"vs",input$scatter_var2_id))
}
)
output$lmSummary <- renderPrint({
req(lmModel())
summary(lmModel())
})
output$diagnosticPlot <- renderPlot({
req(lmModel())
par(mfrow = c(2,2))
plot(lmModel())
})
}
shinyApp(ui,server)
runApp('C:/Model_Monitoring_Tool/samiya_trial.R')
runApp('C:/Model_Monitoring_Tool/current_layout.R')
R.version
runApp('C:/Model_Monitoring_Tool/current_layout.R')
runApp('C:/Model_Monitoring_Tool/current_layout.R')
runApp('C:/Model_Monitoring_Tool/current_layout.R')
runApp('C:/Model_Monitoring_Tool/current_layout.R')
runApp('C:/Model_Monitoring_Tool/current_layout.R')
runApp('C:/Model_Monitoring_Tool/current_layout.R')
runApp('C:/Model_Monitoring_Tool/current_layout.R')
runApp('C:/Model_Monitoring_Tool/current_layout.R')
library(shiny); runApp('C:/Model_Monitoring_Tool/prachi_current.R')
runApp('C:/Model_Monitoring_Tool/prachi_current.R')
runApp('C:/Model_Monitoring_Tool/prachi_current.R')
runApp('C:/Users/Prachi/Dropbox/pss/renv/Model_Monitoring_Tool/Final_layout.R')
runApp('C:/Model_Monitoring_Tool/prachi_current.R')
runApp('C:/Users/Prachi/Dropbox/pss/renv/Model_Monitoring_Tool/today_trial_2.R')
runApp('C:/Model_Monitoring_Tool/prachi_current.R')
library(shiny); runApp('C:/Model_Monitoring_Tool/prachi_current.R')
runApp('C:/Model_Monitoring_Tool/prachi_current.R')
runApp('C:/Model_Monitoring_Tool/prachi_current.R')
runApp('C:/Users/Prachi/Dropbox/pss/renv/Model_Monitoring_Tool/Final_layout.R')
runApp('C:/Users/Prachi/Dropbox/pss/renv/Model_Monitoring_Tool/Final_layout.R')
runApp('C:/Model_Monitoring_Tool/prachi_current.R')
runApp('C:/Model_Monitoring_Tool/SGG.R')
runApp('C:/Model_Monitoring_Tool/prachi_current.R')
runApp('C:/Model_Monitoring_Tool/prachi_current.R')
runApp('C:/Model_Monitoring_Tool/SGG.R')
runApp('C:/Model_Monitoring_Tool/SGG.R')
runApp('C:/Model_Monitoring_Tool/prachi_current.R')
runApp('C:/Model_Monitoring_Tool/prachi_current.R')
runApp('C:/Model_Monitoring_Tool/prachi_current.R')
runApp('C:/Model_Monitoring_Tool/prachi_current.R')
runApp('C:/Model_Monitoring_Tool/prachi_current.R')
runApp('C:/Model_Monitoring_Tool/prachi_current.R')
runApp('C:/Model_Monitoring_Tool/prachi_current.R')
runApp('C:/Model_Monitoring_Tool/SGG.R')
runApp('C:/Model_Monitoring_Tool/SGG.R')
runApp('C:/Model_Monitoring_Tool/SGG.R')
runApp('C:/Model_Monitoring_Tool/SGG.R')
runApp('C:/Model_Monitoring_Tool/SGG.R')
runApp('C:/Model_Monitoring_Tool/SGG.R')
runApp('C:/Model_Monitoring_Tool/SGG.R')
runApp('C:/Model_Monitoring_Tool/SGG.R')
install.packages("ggplot2")
install.packages("ISLR2")
library(ISLR2)
data("Auto")
fix(Auto)
View(Auto)
is.na(Auto)
Auto_=na.omit(Auto)
dim(Auto_)
dim(Auto)
library(ISLR2)
data("Auto")
fix(Auto)
View(Auto)
#is.na(Auto)
Auto_=na.omit(Auto)
dim(Auto)
dim(Auto_)
library(ISLR2)
data("Auto")
fix(Auto)
View(Auto)
#is.na(Auto)
Auto_=na.omit(Auto)
dim(Auto)
dim(Auto_)
dim(Auto)
dim(Auto_)
data("Auto")
dim(Auto)
df_numeric=select_if(Auto,is.numeric)
df_numeric=select_if(Auto, is.numeric)
library(rshiny)
library(shiny)
df_numeric=select_if(Auto, is.numeric)
# df_numeric=select_if(Auto, is.numeric)
sapply(Auto[,1:7],range)
sapply(Auto[,1:7],sd)
sapply(Auto[,1:7],hist)
dim(Auto.reduced)
Auto_=Auto[-c(10:84),];
dim(Auto_);
Auto.reduced=Auto[-c(10:84),];
dim(Auto.reduced);
dim(Auto.reduced);
pairs(Auto[,1:7])
car(Auto[,1:7])
library(shiny); runApp('C:/Model_Monitoring_Tool/SGG.R')
library(shiny); runApp('C:/Model_Monitoring_Tool/SGG.R')
runApp('C:/Model_Monitoring_Tool/SGG.R')
runApp('C:/Model_Monitoring_Tool/SGG.R')
library(shiny); runApp('C:/Model_Monitoring_Tool/SGG.R')
runApp('C:/Model_Monitoring_Tool/SGG.R')
runApp('C:/Users/Prachi/Dropbox/pss/renv/Model_Monitoring_Tool/updated_simple_summary.R')
knitr::opts_chunk$set(echo = FALSE)
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
knitr::opts_chunk$set(echo = FALSE)
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
knitr::opts_chunk$set(echo = FALSE)
header <- dashboardHeader(
title = "Model Monitoring Tool",
#dropdownMenuOutput("messageMenu")
tags$li(class="dropdown",tags$a(href="https://www.linkedin.com/in/sopan-patil-24a995210",icon("linkedin"),"Sopan Patil",target="_blank")),
tags$li(class="dropdown",tags$a(href="https://www.linkedin.com/in/samiya-pathan-3a784b240",icon("linkedin"),"Samiya Pathan",target="_blank")),
tags$li(class="dropdown",tags$a(href="https://www.linkedin.com/in/prachi-gore-4772a11a5",icon("linkedin"),"Prachi Gore",target="_blank"))
)
knitr::opts_chunk$set(echo = FALSE)
library(shiny)
library(shinydashboard)
header <- dashboardHeader(
title = "Model Monitoring Tool",
#dropdownMenuOutput("messageMenu")
tags$li(class="dropdown",tags$a(href="https://www.linkedin.com/in/sopan-patil-24a995210",icon("linkedin"),"Sopan Patil",target="_blank")),
tags$li(class="dropdown",tags$a(href="https://www.linkedin.com/in/samiya-pathan-3a784b240",icon("linkedin"),"Samiya Pathan",target="_blank")),
tags$li(class="dropdown",tags$a(href="https://www.linkedin.com/in/prachi-gore-4772a11a5",icon("linkedin"),"Prachi Gore",target="_blank"))
)
summary(cars)
source("D:/Prachi_Seminar/seminar_trial.R")
shinyApp(ui,server)
library(shiny)
server=  function(){}
shinyApp(ui,server)
library(shinydashboard)
ui = dashboardPage(
header,
sidebar,
body,
title = "Web App With Shiny"
)
ui = dashboardPage(
# header,
# sidebar,
# body,
# title = "Web App With Shiny"
)
server=  function(){}
runApp('D:/Prachi_Seminar/seminar_code.R')
runApp('D:/Prachi_Seminar/seminar_code.R')
runApp('D:/Prachi_Seminar/seminar_code.R')
runApp('D:/Prachi_Seminar/seminar_code.R')
runApp('seminar_code.R')
runApp('seminar_code.R')
runApp('D:/Prachi_Seminar/seminar_code.R')
library(shiny); source('D:/Prachi_Seminar/seminar_r/demo.R')
library(shiny); source('D:/Prachi_Seminar/seminar_r/demo.R')
source('D:/Prachi_Seminar/seminar_r/demo.R')
source("D:/Prachi_Seminar/seminar_r/demo.R", echo=TRUE)
source("D:/Prachi_Seminar/seminar_r/demo.R", echo=TRUE)
runApp('D:/Prachi_Seminar/seminar_r/demo.R')
runApp('D:/Prachi_Seminar/seminar_r/demo.R')
runApp('D:/Prachi_Seminar/seminar_r/demo.R')
runApp('D:/Prachi_Seminar/seminar_r/demo.R')
runApp('D:/Prachi_Seminar/seminar_r/demo.R')
runApp('D:/Prachi_Seminar/seminar_r/demo.R')
runApp('D:/Prachi_Seminar/seminar_r/demo.R')
runApp('D:/Prachi_Seminar/seminar_r/demo.R')
runApp('D:/Prachi_Seminar/seminar_r/demo.R')
runApp('D:/Prachi_Seminar/seminar_r/demo.R')
library(shiny); runApp('D:/Prachi_Seminar/seminar_code.R')
runApp('D:/Prachi_Seminar/seminar_code.R')
runApp('D:/Prachi_Seminar/seminar_code.R')
runApp('D:/Prachi_Seminar/seminar_code.R')
runApp('D:/Prachi_Seminar/seminar_code.R')
runApp('D:/Prachi_Seminar/seminar_code.R')
runApp('seminar_code.R')
runApp('seminar_code.R')
runApp('D:/Prachi_Seminar/seminar_code.R')
runApp('D:/Prachi_Seminar/seminar_code.R')
library(shiny); runApp('D:/Prachi_Seminar/seminar_r/histogram.R')
runApp('D:/Prachi_Seminar/seminar_r/histogram.R')
runApp('D:/Prachi_Seminar/seminar_r/scatter.R')
runApp('C:/Users/Prachi/Dropbox/pss/renv/Model_Monitoring_Tool/updated_Graph.R')
runApp('D:/Prachi_Seminar/seminar_r/barchart.R')
runApp('D:/Prachi_Seminar/seminar_r/barchart.R')
runApp('D:/Prachi_Seminar/seminar_r/boxplot.R')
library(shiny); runApp('D:/Prachi_Seminar/seminar_r/scatter.R')
ui=fluidPage()
print(ui)
library(ISLR2)
View(Smarket)
summary(Smarket)
y=Smarket[,"Direction"]
y
x=Smarket[,2:7]
x=Smarket[,2:7];x
is.na(Smarket)
dim(Smarket)
names(Smarket)
x=Smarket[,2:7];x
glm(y~x,family = binomial)
?Smarket
glm(y~x,data=Smarket,family = binomial)
pairs(Smarket)
pairs(Smarket)
pairs(Smarket[,2:8])
cor(Smarket)
cor(Smarket[,-9])
plot(volume)
attach(Smarket)
plot(volume)
plot(Volume)
plot(Volume)
glm.fits=glm(y~x,data=Smarket,family = binomial)
glm.fits=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family = binomial)
glm.fits
a
a=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family = binomial)
a
summary(a)
457+141
145+507
prob=predict(fit,type="response")
prob[1:10]
fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family = binomial)
fit
summary(fit)
coef(fit)
summary(fit)$coef
summary(fit)$coef[,4]
prob=predict(fit,type="response")
prob[1:10]
contrasts(Direction)
contrasts(Direction)
contrasts(Direction)
pred=rep("Down",1250);
pred[prob>0.5]="Up"
table(pred,Direction)
mean(pred==Direction)
pred=rep("Down",1250);
pred[prob>=0.5]="Up"
table(pred,Direction)
mean(pred==Direction)
pred=rep("Down",1250);
pred[prob>=0.5]="Up"
table(pred,Direction)
mean(pred==Direction)
pred=rep("Down",1250);
pred[prob>0.5]="Up"
table(pred,Direction)
mean(pred==Direction)
train=Y<2005
train=Year<2005
train
train=Smarket[Year<2005]
train=Smarket[,Year<2005]
test_prob[1:10]
contrasts(Direction)
test_pred=rep("Down",252);
test_pred[test_prob>0.5]="Up"
table(test_pred,Direction)
mean(test_pred==Direction)
train=Year<2005
test_data=Smarket[!train,]
dim(test_data)
test_response=Direction[!train] # response variable for test data
train_fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family = binomial,subset = train)
Summary(train_fit)
test_prob=predict(train_fit,test_data,type="response")
test_prob[1:10]
contrasts(Direction)
test_pred=rep("Down",252);
test_pred[test_prob>0.5]="Up"
table(test_pred,Direction)
mean(test_pred==Direction)
train=Year<2005
test_data=Smarket[!train,]
dim(test_data)
test_response=Direction[!train] # response variable for test data
train_fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family = binomial,subset = train)
Summary(train_fit)
test_prob=predict(train_fit,test_data,type="response")
test_prob[1:10]
contrasts(Direction)
test_pred=rep("Down",252);
test_pred[test_prob<0.5]="Up"
table(test_pred,Direction)
mean(test_pred==Direction)
dim(test_data)
test_prob[1:10]
function(input, output) {
output$selected_var <- renderText({
paste("You have selected", input$var)
})
output$selected_var2 <- renderText({
paste("You have selected", input$var2)
})
}
shiny::runApp('something_new')
runApp('something_new')
install.packages("tidyverse")
shiny::runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard/annuity_calculator.R')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
source("C:/shiny_dashboard/annuity_calculator.R", echo=TRUE)
source("C:/shiny_dashboard/annuity_calculator.R", echo=TRUE)
runApp('C:/shiny_dashboard')
runApp()
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp()
runApp('C:/shiny_dashboard')
runApp()
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp()
runApp()
runApp()
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp()
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp()
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp()
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp()
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp()
runApp('C:/shiny_dashboard')
runApp()
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp()
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp()
runApp('C:/shiny_dashboard')
runApp()
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp()
runApp()
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
library(shiny); runApp('C:/Model_Monitoring_Tool/PGG.R')
runApp('C:/Model_Monitoring_Tool/PGG.R')
runApp('C:/Model_Monitoring_Tool/PGG.R')
runApp('C:/Model_Monitoring_Tool/PGG.R')
runApp('C:/Model_Monitoring_Tool/PGG.R')
runApp('C:/Model_Monitoring_Tool/PGG.R')
runApp('PGG.R')
runApp('C:/Model_Monitoring_Tool/PGG.R')
runApp('PGG.R')
runApp('C:/Model_Monitoring_Tool/PGG.R')
runApp('PGG.R')
runApp('C:/Model_Monitoring_Tool/PGG.R')
library(shiny); runApp('C:/Model_Monitoring_Tool/PGG.R')
library(shiny); runApp('C:/Model_Monitoring_Tool/PGG.R')
library(shiny); runApp('C:/Model_Monitoring_Tool/PGG.R')
shiny::runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp()
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
runApp('C:/shiny_dashboard')
